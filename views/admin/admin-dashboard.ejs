<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
    <link href="./css/admin/admin-dashboard.css" rel="stylesheet">
    <link rel="icon" href="/images/logo.jpg" type="image/jpeg">    
</head>

<style>
    
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f5f5f5;
        color: #333;
        margin: 0;
        padding: 0;
    }

    a {
        text-decoration: none;
    }

    .navbar {
        background: linear-gradient(45deg, #06234A, #0d3b66);
        color: white;
        padding: 1rem 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        position: fixed;
        width: 100%;
        z-index: 1000;
        height: 84px;
    }

    .navbar-brand {
        font-size: 1.8rem;
        font-weight: bold;
        color: #60f881;
        letter-spacing: 1px;
    }

    .navbar-nav .nav-link {
        color: #fff;
        margin-left: 30px;
        font-size: 1.1rem;
    }

    .navbar-nav .nav-link:hover {
        color: #60f881;
        border-bottom: 2px solid #60f881;
    }

    .nav-item i {
        margin-right: 8px;
    }

    .sidebar {
        background-color: #041833;
        width: 225px;
        height: 100vh;
        position: fixed;
        top: 60px;
        padding: 2rem 0;
        transition: all 0.3s ease;
        z-index: 999;
    }

    .sidebar ul {
        list-style: none;
        padding-left: 0;
    }

    .sidebar ul li {
        padding: 15px 25px;
    }

    .sidebar ul li a {
        display: flex;
        align-items: center;
        color: #ccc;
        font-size: 1.1rem;
        transition: all 0.2s ease;
    }

    .sidebar ul li a:hover, 
    .sidebar ul li a.active {
        background-color: #60f881;
        color: #041833;
        border-radius: 8px;
    }

    .sidebar ul li a i {
        margin-right: 12px;
    }

    main {
        margin-left: 260px;
        margin-top: 80px;
        padding: 2rem;
        transition: margin-left 0.3s ease;
        background-color: #f5f5f5;
    }

    .main-title {
        font-size: 2rem;
        font-weight: bold;
        color: #06234A;
    }

    .btn-primary, .btn-secondary {
        background-color: #06234A;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        transition: all 0.2s ease-in-out;
    }

    .btn-primary:hover, .btn-secondary:hover {
        background-color: #60f881;
        color: #06234A;
    }

    .dashboard-card {
        background-color: #fff;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        cursor: pointer;
        position: relative;
        left: 200px;
    }

    .dashboard-card:hover {
        transform: translateY(-10px);
    }

    .dashboard-card h5 {
        font-size: 1.4rem;
        font-weight: bold;
        color: #06234A;
    }

    .dashboard-card .card-icon {
        font-size: 2rem;
        color: #60f881;
    }

    .dashboard-card p {
        font-size: 1.1rem;
        color: #333;
    }

    .table-container {
        background-color: #fff;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-top: 30px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 12px 15px;
        text-align: left;
    }

    th {
        background-color: #06234A;
        color: #fff;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    @media (max-width: 768px) {
        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        main {
            margin-left: 0;
        }

        .navbar {
            position: relative;
        }
    }

</style>

<body>

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        
        <span class="navbar-brand"><a href="/"><img src="/images/logo.jpg" alt="" width="74px" height="74px"></a></span>
        
        <div class="collapse navbar-collapse">

            <ul class="navbar-nav ml-auto">

                <li class="nav-item" style="color: white;">
                    <a class="nav-link" href="#" style="color: white;">
                        <i class="fas fa-user" style="color: white;"></i> Admin
                    </a>
                </li>

                <li class="nav-item" style="color: white;">
                    <a class="nav-link" href="/auth-dotaskforme-com|authorize?admin_id=66484204284568551012458856" style="color: white;">
                        <i class="fas fa-sign-out-alt" style="color: white;"></i> Logout
                    </a>

                </li>

            </ul>

        </div>

    </nav>






    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-3 bg-light sidebar">
                
                <div class="sidebar-sticky">
        
                    <ul class="nav flex-column">
        
                        <li class="nav-item">
                            <a class="nav-link active" href="#"><i class="fas fa-home"></i> Dashboard</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="/fetch-all-assignments"><i class="fas fa-file-alt"></i> Assignments</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="/fetch-users"><i class="fas fa-users"></i> Users</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="/search-form"><i class="fas fa-chart-line"></i> search</a>
                        </li>
        
                        <!-- <li class="nav-item">
                            <a class="nav-link" href="#"><i class="fas fa-cogs"></i> Settings</a>
                        </li> -->

                    </ul>

                </div>

            </nav>




            <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4" style="background-color: #f8f9fa; padding: 20px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);">
                
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3" style="border-bottom: 2px solid #06234A;">
                    
                    <h1 class="h2" style="color: #06234A; font-weight: bold; letter-spacing: 1px;">Dashboard</h1>
                    
                    <div>
                        <button class="btn btn-primary" id="show-detailed-view" style="background-color: #06234A; border: none; border-radius: 20px; padding: 10px 20px; transition: background-color 0.3s ease;">
                            Show Detailed View
                        </button>
                        
                        <button class="btn btn-secondary" id="show-table-view" style="background-color: #60f881; color: #06234A; border: none; border-radius: 20px; padding: 10px 20px; margin-left: 10px; transition: background-color 0.3s ease;">
                            Show Table View
                        </button>

                    </div>

                </div>

                <br>
                <br>

                <div class="row mt-12">
                    <div class="col-md-4">
                        <div class="dashboard-card">
                            
                            <div class="d-flex justify-content-between">
                                <h5>Total Assignments</h5>
                                <span class="card-icon"><i class="fas fa-file-alt"></i></span>
                            </div>
                            
                            <p>10 Active Assignments</p>
                        
                        </div>
                    
                    </div>
                    
                    <div class="col-md-4">
                        <div class="dashboard-card">
                            
                            <div class="d-flex justify-content-between">
                                <h5>Users</h5>
                                <span class="card-icon"><i class="fas fa-users"></i></span>
                            </div>

                            <p>8 Registered Users</p>
                        
                        </div>

                        <br>
                        <hr>
                        <br>
                        <br>

                    </div>

                    <hr>
                    <br>
                    <br>
                    
                    <!-- <div class="col-md-4">
                        <div class="dashboard-card">
                            <div class="d-flex justify-content-between">
                                <h5>Search Reports</h5>
                                <span class="card-icon"><i class="fas fa-search"></i></span>
                            </div>
                            <p>200 Reports Found</p>
                        </div>
                    </div>
                </div> -->


                <!-- Assignments Section -->
                <div id="assignments-container" class="row" style="font-size: small; transition: opacity 0.5s ease, transform 0.5s ease; opacity: 1; transform: translateY(0);"></div>
            
                <!-- Table Section -->
                <div id="table-view" class="table-view" style="font-size: small; padding: 20px; background-color: #fff; border-radius: 15px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); margin-top: 20px; transition: opacity 0.5s ease, transform 0.5s ease;">
                    
                    <table class="table table-striped" style="font-size: small;">
                        <thead>
                            <tr style="background-color: #06234A; color: #fff;">

                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Serial No.</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Assignment ID</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Assignment Type</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Email</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">WhatsApp Number</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Payment Status</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Work Status</th>
                                <th style="padding: 15px; border-bottom: 2px solid #60f881;">Assigned To</th>

                            </tr>

                        </thead>

                        <tbody id="table-body">
                            <!-- Dynamic content here -->
                        </tbody>

                    </table>

                </div>

            </main>

        </div>

    </div>






    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.6.0/dist/umd/popper.min.js"></script>
    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    
    
    <script>

        let serialNumber = 1;
    
        document.addEventListener('DOMContentLoaded', function () {
            fetch('/admin/dashboard')
                .then(response => response.json())
    
                .then(assignments => {
                    const assignmentsContainer = document.getElementById('assignments-container');
                    const tableBody = document.getElementById('table-body');
    
    
                    assignments.forEach(assignment => {
                        const paymentTag = assignment.payment_status === 'paid' ? '<span class="tag">Payment Done</span>' : '';

                           
                        const isDeveloperAssigned = assignment.developer && assignment.developer !== '';


                        const assignmentCard = `
                            <div class="col-md-4 mb-4">
                                <div class="card">
                                    <div class="card-body">
    
                                        <h5 class="card-title">${assignment.assignmentType}</h5>

                                        <p><b>Task ID: </b> <a href="/admin-assignment/${assignment._id}" class="task-link"> &nbsp ${assignment._id}</a></p>
    
                                        <p class="card-text"><b>Exact Deadline: </b> &nbsp ${assignment.exactDeadline}</p>
    
                                        <p class="card-text"><b>Email: </b> &nbsp ${assignment.email}</p>

                                        <p class="card-text"><b>WhatsApp Number: </b> &nbsp ${assignment.whatsapp}</p>
    
                                        <p class="card-text"><b>Additional Details: </b> &nbsp ${assignment.additionalDetails}</p>
    
                                        <p class="card-text"><b>Well Commented Code: </b> &nbsp ${assignment.wellCommentedCode}</p>
    
                                        <p class="card-text"><b>Viva Preparation: </b> &nbsp ${assignment.vivaPreparation}</p>
    
                                        <p class="card-text"><b>No Open Source: </b> &nbsp ${assignment.noOpenSource}</p>
    
                                        <p class="card-text"><b>Programming Language: </b> &nbsp ${assignment.programmingLanguage}</p>
    
                                        <p class="card-text"><b>Web Development Type: </b> &nbsp ${assignment.webDevelopmentType}</p>
    
                                        <p class="card-text"><b>Full Stack Framework: </b> &nbsp ${assignment.fullStackFramework}</p>
    
                                        <p class="card-text"><b>Top Programmer: </b> &nbsp ${assignment.topProgrammer}</p>
    
                                        <p class="card-text"><b>Total Cost (Tentative): </b> &nbsp $${assignment.totalCost.toFixed(2)}</p>
    
                                        <p class="card-text"><b>Status: </b> &nbsp ${assignment.status}</p>
    
                                        <p class="card-text payment-status-container"><b>Payment Status: </b> &nbsp ${assignment.payment_status} ${paymentTag}</p>
                                         
                                        <p><b>File URL: </b> &nbsp <a href="${assignment.fileUrl}" target="_blank">View File</a></p>
        
                                        <hr>    
                                        <br>
                                        <br>
                                        
                                        <h6 class="card-text"><b>Assigned To: ${assignment.developer}</b></h6>
                                        
                                        <h6 class="card-text"><b>Task Submission URL: <a href="${assignment.taskSubmissionUrl}" target="_blank">Our Work</a></b></h6>

                                        <br>
                                        <br>
                                        <hr>

                                        <div class="form-check">
                                            
                                            <input class="form-check-input work-started-checkbox" type="checkbox" value="" id="Started-${assignment._id}" ${assignment.status === 'Started' ? 'checked' : ''} data-id="${assignment._id}">

                                            <label class="form-check-label" for="Started-${assignment._id}">Work Started</label>
                                             
                                            <br>

                                            <input class="form-check-input work-ended-checkbox" type="checkbox" value="" id="Completed-${assignment._id}" ${assignment.status === 'Completed' ? 'checked' : ''} data-id="${assignment._id}">

                                            <label class="form-check-label" for="Completed-${assignment._id}">Work Completed</label>

                                        </div>
   
                                        <div class="form-check">
                                            
                                            <input class="form-check-input payment-status-checkbox" type="checkbox" value="" id="Paid-${assignment._id}" ${assignment.payment_status === 'Paid' ? 'checked' : ''} data-id="${assignment._id}">
                                            
                                            <label class="form-check-label" for="Paid-${assignment._id}">Mark as Paid</label>

                                        </div>

                                        <br>

                                        <form class="developer-form">
                                            
                                            <div class="form-group">
                                                
                                                <label for="developer-${assignment._id}"> <strong>Task Assigned to: </strong></label>
                                                
                                                <select id="developer-${assignment._id}"                            class="form-control" data-id="${assignment._id}">
                                                    
                                                    <option value="">Select Developer</option>

                                                    <option value="Rana Waqas Ali">Rana Waqas Ali</option>
                                            
                                                    <option value="Talha Khalid">Talha Khalid</option>

                                                </select>

                                            </div>

                                            <button type="button" class="btn btn-primary assign-developer-btn" data-id="${assignment._id}">Assign to Developer</button>

                                        </form>

                                        <br>

                                        <hr>

                                        <!-- Cost Update Form -->

                                        <form class="cost-form">
                                            
                                            <div class="form-group">
                                                
                                                <label for="cost-${assignment._id}"> <strong>Update Total Cost: </strong></label>
                                                
                                                <input type="number" id="cost-${assignment._id}" class="form-control" data-id="${assignment._id}" step="0.01" min="0" />

                                            </div>
                                            
                                            <button type="button" class="btn btn-secondary update-cost-btn" data-id="${assignment._id}">Update Cost</button>
                                            
                                        </form>

                                        <br>

                                        <hr>

                                        <form id="assignmentForm" action="/admin/completed-work/submission" method="POST" enctype="multipart/form-data">
                                            
                                            <input type="hidden" name="assignmentId" value="${ assignment._id}">
                                            
                                            <input type="file" name="file" accept="*/*" required>
                                            
                                            <button type="submit" class="submit-btn">Send to User</button>
                                            
                                        </form>

                                    </div>

                                </div>

                            </div>
                        `;
                       
                        assignmentsContainer.insertAdjacentHTML('beforeend', assignmentCard);


                        const tableRow = `
                             <tr>
                                <td>${serialNumber++}</td>
                                <td><a href="/admin-assignment/${assignment._id}" class="task-link">${assignment._id}</a></td>
                                <td>${assignment.assignmentType}</td>
                                <td>${assignment.email}</td>
                                <td>${assignment.whatsapp}</td>
                                <td>${assignment.payment_status}</td>
                                <td>${assignment.status}</td>
                                <td>${isDeveloperAssigned ? assignment.developer : 'Not Assigned'}</td>
                            </tr>
                        `;

                        tableBody.insertAdjacentHTML('beforeend', tableRow);
                    });






                    document.getElementById('show-detailed-view').addEventListener('click', () => {
                        document.getElementById('assignments-container').style.display = 'flex';
                        document.getElementById('table-view').style.display = 'none';
                    });






                    document.getElementById('show-table-view').addEventListener('click', () => {
                        document.getElementById('assignments-container').style.display = 'none';
                        document.getElementById('table-view').style.display = 'block';                    
                    });






                    document.querySelectorAll('.work-started-checkbox').forEach(checkbox => {
                    
                        checkbox.addEventListener('change', function () {
                            const assignmentId = this.getAttribute('data-id');
                            const isChecked = this.checked;
                    
                            fetch(`/admin/update-status/${assignmentId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                    
                                body: JSON.stringify({ status: isChecked ? 'Started' : 'Not Started' })
                            })
                    
                            .then(response => response.json())
                            
                            .then(data => {
                    
                                if (data.message === 'Status updated') {
                                    alert('Status updated and email sent to user');

                                    this.disabled = true;
                                    this.closest('.form-check').classList.add('frozen');
                                } 
                                
                                else {
                                    alert('Error updating status');
                                }
                            })
                            
                            .catch(error => console.error('Error updating status:', error));

                        });
                    });
                    





                    document.querySelectorAll('.work-ended-checkbox').forEach(checkbox => {
                    
                    checkbox.addEventListener('change', function () {
                        const assignmentId = this.getAttribute('data-id');
                        const isChecked = this.checked;
                
                        fetch(`/admin/update-completion-status/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                
                            body: JSON.stringify({ status: isChecked ? 'Completed' : 'Not Completed' })
                        })
                
                        .then(response => response.json())
                    
                        .then(data => {
                
                            if (data.message === 'Status updated') {
                                alert('Status updated and email sent to user');

                                this.disabled = true;
                                this.closest('.form-check').classList.add('frozen');
                            } 
                            
                            else {
                                alert('Error updating status');
                            }
                        })
                        
                        .catch(error => console.error('Error updating status:', error));

                    });
                });






                document.querySelectorAll('.payment-status-checkbox').forEach(checkbox => {
                    
                    checkbox.addEventListener('change', function () {
                        const assignmentId = this.getAttribute('data-id');
                        const isChecked = this.checked;
                    
                        fetch(`/admin/update-payment-status/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                            'Content-Type': 'application/json'
                            },
                    
                            body: JSON.stringify({ payment_status: isChecked ? 'Paid' : 'Not Paid Yet' })
                            })
                    
                            .then(response => response.json())
                            
                            .then(data => {
                    
                                if (data.message === 'Status updated') {
                                    alert('Payment status updated and email sent to user');
                                    const tagContainer = this.closest('.card-body').querySelector('.payment-status-container');
                    
                                    if (isChecked) {
                    
                                        if (!tagContainer.querySelector('.tag')) {
                                            const newTag = document.createElement('span');
                                            newTag.classList.add('tag');
                                            newTag.textContent = 'Payment Done';
                                            tagContainer.appendChild(newTag);
                                        }
                                    } 
                                    
                                    else {
                                        const tag = tagContainer.querySelector('.tag');
                                    
                                        if (tag) {
                                            tag.remove();
                                        }
                                    }

                                this.disabled = true;
                                this.closest('.form-check').classList.add('frozen');

                                } 
                                
                                else {
                                    alert('Error updating payment status');
                                }
                            })
                            
                            .catch(error => console.error('Error updating payment status:', error));

                        });
                    });

    




                document.querySelectorAll('.update-cost-btn').forEach(button => {
                
                    button.addEventListener('click', function () {
                    
                        const assignmentId = this.getAttribute('data-id');
                        const costInput = document.getElementById(`cost-${assignmentId}`);
                        const cost = costInput.value;
                
                        if (isNaN(cost) || cost < 0) {
                            alert('Please enter a valid cost');
                            return;
                        }
                
                        fetch(`/admin/update-cost/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ cost: parseFloat(cost) })
                    })
                    
                    .then(response => response.json())
                    
                    .then(data => {
                    
                        if (data.message === 'Cost updated') {
                            alert('Cost updated successfully');
                            const cardBody = this.closest('.card-body');
                            let costInfo = cardBody.querySelector('.cost-info');
                            
                            location.reload();
                        
                            if (costInfo) {
                                costInfo.textContent = `Cost: $${cost}`;
                            } 
                            
                            else {
                                // costInfo = document.createElement('p');
                                // costInfo.classList.add('cost-info');
                                // costInfo.textContent = `Cost: $${cost}`;
                                cardBody.appendChild(costInfo);
                            }
                        
                            const form = cardBody.querySelector('.cost-form');
                            
                            if (form) {
                                form.remove();
                            }
                        
                            this.disabled = true;
                            costInput.disabled = true;
                        } 
                        
                        else {
                            alert(data.message);
                        }
                    })

                    .catch(error => console.error('Error updating cost:', error));

                });

            });






            document.querySelectorAll('.assign-developer-btn').forEach(button => {
                        button.addEventListener('click', function () {
                        const assignmentId = this.getAttribute('data-id');
                        const developerSelect = document.getElementById(`developer-${assignmentId}`);
                        const developerName = developerSelect.value;

                        if (!developerName) {
                            alert('Please select a developer');
                            return;
                        }

                        fetch(`/admin/update-developer/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ developer: developerName })
                        })

                        .then(response => response.json())
                        
                        .then(data => {
                            
                            if (data.message === 'Developer updated') {
                                alert('Developer assigned successfully');
                                const cardBody = this.closest('.card-body');
                                const developerInfo = cardBody.querySelector('.developer-info');

                            if (developerInfo) {
                                developerInfo.textContent = `Developer: ${developerName}`;
                            } 
                            
                            else {
                                const newInfo = document.createElement('p');
                                newInfo.classList.add('developer-info');
                                newInfo.textContent = `Developer: ${developerName}`;
                                cardBody.appendChild(newInfo);
                            }

                            const form = cardBody.querySelector('.developer-form');
                            
                            if (form) {
                                form.remove();
                            }

                            this.disabled = true;
                            developerSelect.disabled = true;
                        } 
                        
                        else {
                            alert('Error updating developer');
                        }
                    })

                    .catch(error => console.error('Error updating developer:', error));

                });
            });

            })
                                
                .catch(error => console.error('Error fetching assignments:', error));

            });


    </script>

</body>
</html>
